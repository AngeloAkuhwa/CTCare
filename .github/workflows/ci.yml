name: .NET CI

# --- Triggers ---------------------------------------------------------------
on:
  push:
    branches: [ main ]                  # Run on direct pushes to main
    paths:                              # Ignore docs-only changes to save minutes
      - "Src/**"
      - "Tests/**"
      - "CTCare.sln"
      - ".github/workflows/**"
  pull_request:
    branches: [ main ]                  # Run on PRs targeting main
    paths:
      - "Src/**"
      - "Tests/**"
      - "CTCare.sln"
      - ".github/workflows/**"

# --- Prevent wasted builds --------------------------------------------------
concurrency:
  group: net-ci-${{ github.ref }}       # One run per branch/PR at a time
  cancel-in-progress: true              # Auto-cancel older in-flight runs

jobs:
  build-test:
    name: Build, Test, Coverage
    runs-on: ubuntu-latest

    steps:
      # 1) Get the source
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Install .NET 8 SDK (with built-in NuGet cache)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true                   # Speeds up restore by caching NuGet
          cache-dependency-path: |
            **/*.csproj
            **/*.props
            **/*.targets

      # (Optional) Extra NuGet cache for non-standard layouts
      - name: Cache NuGet packages (fallback)
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # 3) Restore all projects
      - name: Restore dependencies
        run: dotnet restore CTCare.sln

      # 4) Enforce code style (fails if formatting is required)
      - name: Verify formatting
        run: dotnet format CTCare.sln --verify-no-changes

      # 5) Build (Release)
      - name: Build solution
        run: dotnet build CTCare.sln --no-restore -c Release

      # 6) Test with coverage (Cobertura plays nice with most tools, inc. Codecov)
      - name: Run tests with code coverage
        run: >
          dotnet test CTCare.sln -c Release --no-build
          --logger "trx;LogFileName=test-results.trx"
          /p:CollectCoverage=true
          /p:CoverletOutputFormat=cobertura
          /p:CoverletOutput=./TestResults/coverage/

      # 7) Upload test results (always upload, even if tests fail)
      - name: Upload test result files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults/**/*.trx"

      # 8) Upload coverage artifacts (Cobertura XML)
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-cobertura
          path: "**/TestResults/coverage/**/*.xml"

      # 9) Quick dependency security audit (does not fail the build)
      - name: Vulnerability report
        run: dotnet list CTCare.sln package --vulnerable || true

      # 10) Publish API (useful for deployments/manual testing)
      - name: Publish CTCare.Api
        run: dotnet publish Src/CTCare.Api/CTCare.Api.csproj -c Release -o ./artifacts/api

      - name: Upload published API artifact
        uses: actions/upload-artifact@v4
        with:
          name: CTCare-api
          path: artifacts/api

      # 11) Upload coverage to Codecov (optional: needs CODECOV_TOKEN for private repos)
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: '**/TestResults/coverage/**/*.xml'
          flags: backend
          verbose: true
          fail_ci_if_error: false   # flip to true after itâ€™s working
          token: ${{ secrets.CODECOV_TOKEN }}  # <- ONLY if you choose Option B

  # --- Optional: Docker image to GHCR on main pushes ------------------------
  # Would be Enabled when I am ready to ship containers. Ensure a Dockerfile exists at Src/CTCare.Api/Dockerfile.
  docker:
    name: Build & push Docker image
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write                    # Needed to push to GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Src/CTCare.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/CTCare-api:latest
            ghcr.io/${{ github.repository }}/CTCare-api:${{ github.run_number }}
